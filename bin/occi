#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

require 'rubygems'
require 'occi'
require 'pp'
require 'highline/import'

# OcciOpts is not part of the occi required above
require 'occi/client/occiopts'

extend OCCI::DSL

# get arguments and validate/parse them to an ostruct
options = OcciOpts.parse ARGV

# initiate the Logger
logger = OCCI::Log.new(options.log[:out])
logger.level = options.log[:level]
options.log[:logger] = logger

OCCI::Log.info "Starting OCCI client ..."
OCCI::Log.debug "Options: #{options}"

# running with an empty password?
if options.auth[:password].nil? or options.auth[:user_cert_password].nil?
  options.auth[:password] = options.auth[:user_cert_password] = ask("Enter password: ") { |q| q.echo = false }
end

begin

  OCCI::Log.info "Establishing a connection to #{options.endpoint} ..."
  connect options.endpoint, options.auth, options.log, true, options.media_type

  OCCI::Log.info "Executing action #{options.do} on #{options.resource} ..."
  case options.do
  when "list"
  	pp list options.resource
  when "describe"
  	pp describe options.resource
  when "create"
  	raise "Not yet implemented!"
  when "delete"
  	result = delete options.resource

  	if result
      OCCI::Log.info "Resource #{options.resource} successfully removed!"
    else
      OCCI::Log.warn "Failed to remove resource #{options.resource}!"
    end
  when "trigger"
  	raise "Not yet implemented!"
  else
  	raise "Unknown action [#{options.do}]!"
  end

rescue Exception => ex
  OCCI::Log.error "An error occurred! Message: #{ex.message}"
  raise ex if options.debug
  exit!
end

OCCI::Log.info "OCCI client is shutting down ..."

exit!(true)