{"body":"rOCCI - A Ruby OCCI Framework\r\n=================================\r\n\r\n[![Build Status](https://secure.travis-ci.org/gwdg/rOCCI.png)](http://travis-ci.org/gwdg/rOCCI)\r\n\r\nRequirements\r\n------------\r\n\r\nThe following setup is recommended\r\n\r\n* usage of the Ruby Version Manager\r\n* Ruby 1.9.3\r\n* RubyGems installed\r\n\r\nInstallation\r\n------------\r\n\r\n    gem install occi\r\n\r\nUsage\r\n-----\r\n### Client\r\nThe OCCI gem includes a client you can use directly from shell with the following auth methods: x509 (with --password, --user-cred and --ca-path), basic (with --username and --password), digest (with --username and --password), none. If you won't set a password using --password, the client will run in an interactive mode and ask for it later on.\r\n\r\nTo find out more about available options and defaults use\r\n\r\n    occi --help\r\n\r\nTo list available resources use\r\n\r\n    occi --endpoint https://<ENDPOINT>:<PORT>/ --action list --resource compute --auth x509\r\n    occi --endpoint https://<ENDPOINT>:<PORT>/ --action list --resource storage --auth x509\r\n    occi --endpoint https://<ENDPOINT>:<PORT>/ --action list --resource network --auth x509\r\n\r\nTo describe available resources use\r\n\r\n    occi --endpoint https://<ENDPOINT>:<PORT>/ --action describe --resource compute --auth x509\r\n    occi --endpoint https://<ENDPOINT>:<PORT>/ --action describe --resource storage --auth x509\r\n    occi --endpoint https://<ENDPOINT>:<PORT>/ --action describe --resource network --auth x509\r\n\r\nTo describe specific resources use\r\n\r\n    occi --endpoint https://<ENDPOINT>:<PORT>/ --action describe --resource https://<ENDPOINT>:<PORT>/compute/<OCCI_ID> --auth x509\r\n    occi --endpoint https://<ENDPOINT>:<PORT>/ --action describe --resource https://<ENDPOINT>:<PORT>/storage/<OCCI_ID> --auth x509\r\n    occi --endpoint https://<ENDPOINT>:<PORT>/ --action describe --resource https://<ENDPOINT>:<PORT>/network/<OCCI_ID> --auth x509\r\n\r\nTo list available OS templates or Resource templates use\r\n\r\n    occi --endpoint https://<ENDPOINT>:<PORT>/ --action list --resource os_tpl --auth x509\r\n    occi --endpoint https://<ENDPOINT>:<PORT>/ --action list --resource resource_tpl --auth x509\r\n\r\nTo describe a specific OS template or Resource template use\r\n\r\n    occi --endpoint https://<ENDPOINT>:<PORT>/ --action describe --resource os_tpl#debian6 --auth x509\r\n    occi --endpoint https://<ENDPOINT>:<PORT>/ --action describe --resource resource_tpl#small --auth x509\r\n\r\nTo create a compute resource with mixins use\r\n\r\n    occi --endpoint https://<ENDPOINT>:<PORT>/ --action create --resource compute --mixin os_tpl#debian6 --mixin resource_tpl#small --resource-title \"My rOCCI VM\" --auth x509\r\n\r\nTo delete a compute resource use\r\n\r\n    occi --endpoint https://<ENDPOINT>:<PORT>/ --action delete --resource https://<ENDPOINT>:<PORT>/compute/<OCCI_ID> --auth x509\r\n\r\n### Client scripting\r\n\r\n#### Auth\r\n\r\nFor Basic auth use\r\n\r\n    auth = Hashie::Mash.new\r\n    auth.type = 'basic'\r\n    auth.username = 'user'\r\n    auth.password = 'mypass'\r\n \r\nFor Digest auth use\r\n\r\n    auth = Hashie::Mash.new\r\n    auth.type = 'digest'\r\n    auth.username = 'user'\r\n    auth.password = 'mypass'\r\n\r\nFor X.509 auth use\r\n \r\n    auth = Hashie::Mash.new\r\n    auth.type = 'x509'\r\n    auth.user_cert = '/Path/To/My/usercert.pem'\r\n    auth.user_cert_password = 'MyPassword'\r\n    auth.ca_path = '/Path/To/root-certificates'\r\n\r\n#### DSL\r\nIn your scripts, you can use the OCCI client DSL.\r\n\r\nTo include the DSL definitions in your script use\r\n\r\n    extend OCCI::DSL\r\n\r\nTo connect to an OCCI endpoint/server (e.g. running on http://localhost:3000/ )\r\n\r\n    connect('http://localhost:3300',auth||=nil)\r\n\r\nTo get the list of available resource types or mixin types use\r\n\r\n    resource_types\r\n    mixin_types\r\n\r\nTo get compute, storage or network descriptions use\r\n\r\n    describe \"compute\"\r\n    describe \"storage\"\r\n    describe \"network\"\r\n\r\nTo get the location of compute, storage or network resources use\r\n\r\n    list \"compute\"\r\n    list \"storage\"\r\n    list \"network\"\r\n\r\nTo get the identifiers of specific mixins in specific mixin types use\r\n\r\n    mixin \"my_template\", \"os_tpl\"\r\n    mixin \"small\", \"resource_tpl\"\r\n\r\nTo get the identifiers of specific mixins with unknown types use\r\n\r\n    mixin \"medium\"\r\n\r\nTo get mixin descriptions use\r\n\r\n    mixin \"medium\", nil, true\r\n    mixin \"my_template\", \"os_tpl\", true\r\n\r\nTo get a list of names of all / OS templates / Resource templates mixins use\r\n\r\n    mixins\r\n    mixins \"os_tpl\"\r\n    mixins \"resource_tpl\"\r\n\r\nTo create a new compute resource use\r\n\r\n    os = mixin 'my_os', 'os_tpl'\r\n    size = mixin 'large', 'resource_tpl'\r\n    cmpt = resource \"compute\"\r\n    cmpt.mixins << os << size\r\n    cmpt.attributes.occi!.core!.title = \"My VM\"\r\n    create cmpt\r\n\r\nTo get a description of a specific resource use\r\n\r\n    describe \"https://<ENDPOINT>:<PORT>/compute/<OCCI_ID>\"\r\n    describe \"https://<ENDPOINT>:<PORT>/storage/<OCCI_ID>\"\r\n    describe \"https://<ENDPOINT>:<PORT>/network/<OCCI_ID>\"\r\n\r\nTo delete a specific resource use\r\n\r\n    delete \"https://<ENDPOINT>:<PORT>/compute/<OCCI_ID>\"\r\n    delete \"https://<ENDPOINT>:<PORT>/storage/<OCCI_ID>\"\r\n    delete \"https://<ENDPOINT>:<PORT>/network/<OCCI_ID>\"\r\n\r\n#### API\r\nIf you need low level access to parts of the OCCI client or need to use more than one instance\r\nat a time, you should use the OCCI client API directly.\r\n\r\nTo connect to an OCCI endpoint/server (e.g. running on http://localhost:3000/ )\r\n\r\n    client = OCCI::Client.new('http://localhost:3300',auth||=nil)\r\n\r\nAll available categories are automatically registered to the OCCI model during client initialization. You can get them via\r\n\r\n    client.model\r\n\r\nTo get the list of available resource types or mixin types use\r\n\r\n    client.get_resource_types\r\n    client.get_mixin_types\r\n\r\nTo get compute, storage or network descriptions use\r\n\r\n    client.describe \"compute\"\r\n    client.describe \"storage\"\r\n    client.describe \"network\"\r\n\r\nTo get the location of compute, storage or network resources use\r\n\r\n    client.list \"compute\"\r\n    client.list \"storage\"\r\n    client.list \"network\"\r\n\r\nTo get the identifiers of specific mixins in specific mixin types use\r\n\r\n    client.find_mixin \"my_template\", \"os_tpl\"\r\n    client.find_mixin \"small\", \"resource_tpl\"\r\n\r\nTo get the identifiers of specific mixins with unknown types use\r\n\r\n    client.find_mixin \"medium\"\r\n\r\nTo get mixin descriptions use\r\n\r\n    client.find_mixin \"medium\", nil, true\r\n    client.find_mixin \"my_template\", \"os_tpl\", true\r\n\r\nTo get a list of names of all / OS templates / Resource templates mixins use\r\n\r\n    client.get_mixins\r\n    client.get_mixins \"os_tpl\"\r\n    client.get_mixins \"resource_tpl\"\r\n\r\nTo create a new compute resource use\r\n\r\n    os = client.find_mixin 'my_os', 'os_tpl'\r\n    size = client.find_mixin 'large', 'resource_tpl'\r\n    cmpt = client.get_resource \"compute\"\r\n    cmpt.mixins << os << size\r\n    cmpt.attributes.occi!.core!.title = \"My VM\"\r\n    client.create cmpt\r\n\r\nTo get a description of a specific resource use\r\n\r\n    client.describe \"https://<ENDPOINT>:<PORT>/compute/<OCCI_ID>\"\r\n    client.describe \"https://<ENDPOINT>:<PORT>/storage/<OCCI_ID>\"\r\n    client.describe \"https://<ENDPOINT>:<PORT>/network/<OCCI_ID>\"\r\n\r\nTo delete a specific resource use\r\n\r\n    client.delete \"https://<ENDPOINT>:<PORT>/compute/<OCCI_ID>\"\r\n    client.delete \"https://<ENDPOINT>:<PORT>/storage/<OCCI_ID>\"\r\n    client.delete \"https://<ENDPOINT>:<PORT>/network/<OCCI_ID>\"\r\n\r\n#### Logging\r\n\r\nThe OCCI gem includes its own logging mechanism using a message queue. By default, no one is listening to that queue.\r\nA new OCCI Logger can be initialized by specifying the log destination (either a filename or an IO object like\r\nSTDOUT) and the log level.\r\n\r\n    OCCI::Log.new(STDOUT,OCCI::Log::INFO)\r\n\r\nYou can create multiple Loggers to receive the log output.\r\n\r\nYou can always, even if there is no logger defined, log output using the class methods of OCCI::Log e.g.\r\n\r\n    OCCI::Log.info(\"Test message\")\r\n\r\n#### Registering categories in the OCCI Model\r\n\r\nBefore the parser may be used, the available categories have to be registered in the OCCI Model.\r\n\r\nFor categories already specified by the OCCI WG a method exists in the OCCI Model class to register them:\r\n\r\n    model = OCCI::Model.new\r\n    model.register_infrastructure\r\n\r\nFurther categories can either be registered from files which include OCCI collections in JSON formator or from parsed\r\n JSON objects (e.g. from the query interface of an OCCI service endpoint).\r\n\r\n#### Parsing OCCI messages\r\n\r\nThe OCCI gem includes a Parser to easily parse OCCI messages. With a given media type (e.g. json,\r\nxml or plain text) the parser analyses the content of the message body and, if supplied,\r\nthe message header. As the text/plain and text/occi media type do not clearly distinguish between a message with a\r\ncategory and a message with an entity which has a kind, it has to be specified if the message contains a category (e\r\n.g. for user defined mixins)\r\n\r\nOCCI messages can be parsed to an OCCI collection for example like\r\n\r\n    media_type = 'text/plain'\r\n    body = %Q|Category: compute; scheme=\"http://schemas.ogf.org/occi/infrastructure#\"; class=\"kind\"|\r\n    collection=OCCI::Parser.parse(media_type, body)\r\n\r\n#### Parsing OVF / OVA files\r\n\r\nParsing of OVF/OVA files is partly supported and will be improved in future versions.\r\n\r\nThe example in [DMTF DSP 2021](http://www.dmtf.org/sites/default/files/standards/documents/DSP2021_1.0.0.tar) is\r\nbundled with rOCCI and can be parsed to an OCCI collection with\r\n\r\n    require 'open-uri'\r\n    ova=open 'https://raw.github.com/gwdg/rOCCI/master/spec/occi/test.ova'\r\n    collection=OCCI::Parser.ova(ova.read)\r\n\r\nCurrently only the following entries of OVF files are parsed\r\n\r\n* File in References\r\n* Disk in the DiskSection\r\n* Network in the NetworkSection\r\n* in the VirutalSystemSection:\r\n** Info\r\n** in the VirtualHardwareSection the items regarding\r\n*** Processor\r\n*** Memory\r\n*** Ethernet Adapter\r\n*** Parallel port\r\n\r\n### Using the OCCI model\r\n\r\nThe OCCI gem includes all OCCI Core classes necessary to handly arbitrary OCCI objects.\r\n\r\nChangelog\r\n---------\r\n\r\n### version 2.5\r\n\r\n* improved OCCI Client\r\n* improved documentation\r\n* several bugfixes\r\n\r\n### Version 2.4\r\n\r\n* Changed OCCI attribute properties from lowercase to first letter uppercase (e.g. type -> Type, default -> Default, ...)\r\n\r\n### Version 2.3\r\n\r\n* OCCI objects are now initialized with a list of attributes instead of a hash. Thus it is easier to check which\r\nattributes are expected by a class and helps prevent errors.\r\n* Parsing of a subset of the OVF specification is supported. Further parts of the specification will be covered in\r\nfuture versions of rOCCI.\r\n\r\n### Version 2.2\r\n\r\n* OCCI Client added. The client simplifies the execution of OCCI commands and provides shortcuts for often used steps.\r\n\r\n### Version 2.1\r\n\r\n* Several improvements to the gem structure and code documentation. First rSpec test were added. Readme has been extended to include instructions how the gem can be used.\r\n\r\n### Version 2.0\r\n\r\n* Starting with version 2.0 Florian Feldhaus and Piotr Kasprzak took over the development of the OCCI gem. The codebase was taken from the rOCCI framework and improved to be bundled as a standalone gem.\r\n\r\n### Version 1.X\r\n\r\n* Version 1.X of the OCCI gem has been developed by retr0h and served as a simple way to access the first OpenNebula OCCI implementation.\r\n\r\nDevelopment\r\n-----------\r\n\r\nCheckout latest version from GIT:\r\n\r\n    git clone git://github.com/gwdg/rOCCI.git\r\n\r\nChange to rOCCI folder\r\n\r\n    cd rOCCI\r\n\r\nInstall dependencies for deployment\r\n\r\n    bundle install --deployment\r\n\r\n### Code Documentation\r\n\r\n[Code Documentation for rOCCI by YARD](http://rubydoc.info/github/gwdg/rOCCI/)\r\n\r\n### Continuous integration\r\n\r\n[Continuous integration for rOCCI by Travis-CI](http://travis-ci.org/gwdg/rOCCI/)\r\n\r\n### Contribute\r\n\r\n1. Fork it.\r\n2. Create a branch (git checkout -b my_markup)\r\n3. Commit your changes (git commit -am \"My changes\")\r\n4. Push to the branch (git push origin my_markup)\r\n5. Create an Issue with a link to your branch\r\n","google":"","name":"rOCCI","tagline":"A Ruby OCCI Framework","note":"Don't delete this file! It's used internally to help with page regeneration."}