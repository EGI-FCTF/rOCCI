{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"A Ruby OCCI Framework","name":"rOCCI","google":"","body":"rOCCI - A Ruby OCCI Framework\r\n=================================\r\n\r\n[![Build Status](https://secure.travis-ci.org/gwdg/rOCCI.png)](http://travis-ci.org/gwdg/rOCCI)\r\n\r\nRequirements\r\n------------\r\n\r\nThe following setup is recommended\r\n\r\n* usage of the Ruby Version Manger\r\n* Ruby 1.9.3\r\n* RubyGems installed\r\n\r\nInstallation\r\n------------\r\n\r\n    gem install occi\r\n\r\nUsage\r\n-----\r\n\r\nUse the Interactive Ruby Shell (IRB) to interact with an OCCI server. If you have the occi gem installed, you just have\r\nto start irb from the command line:\r\n\r\n    irb\r\n\r\nIf you want to test newer versions of rOCCI, you have to tell irb from where it\r\nshould load occi:\r\n\r\n    cd rOCCI\r\n    irb -I lib\r\n\r\nFirst require the gem, for Ruby 1.8.7 you also have to require rubygems\r\n\r\n    require 'rubygems'\r\n    require 'occi'\r\n\r\n### Client\r\n\r\nThe OCCI gem includes a Client to simplify the usage of an OCCI endpoint. If you want to use authentication then you\r\nshould create a hash with information either on username and password for basic authentication or with a X.509 user\r\ncertificate, the user certificate password and the path to the Root CAs which are used to verify the certificate of the\r\nOCCI server.\r\n\r\nFor Basic auth use\r\n\r\n    auth = Hashie::Mash.new\r\n    auth.type = 'basic'\r\n    auth.username = 'user'\r\n    auth.password = 'mypass'\r\n\r\nFor Digest auth use\r\n\r\n    auth = Hashie::Mash.new\r\n    auth.type = 'digest'\r\n    auth.username = 'user'\r\n    auth.password = 'mypass'\r\n\r\nFor X.509 auth use\r\n\r\n    auth = Hashie::Mash.new\r\n    auth.type = 'x509'\r\n    auth.user_cert = '/Path/To/My/usercert.pem'\r\n    auth.user_cert_password = 'MyPassword'\r\n    auth.ca_path = '/Path/To/root-certificates'\r\n\r\nTo connect to an OCCI endpoint/server (e.g. running on http://localhost:3000/ )\r\n\r\n    client = OCCI::Client.new('http://occi.cloud.gwdg.de:3300',auth||=nil)\r\n\r\nAll available categories are automatically registered to the OCCI model during client initialization. You can get them via\r\n\r\n    client.model\r\n\r\nTo get all resources (as a list of OCCI::Resources) currently managed by the endpoint use\r\n\r\n    client.get resources\r\n\r\nTo get only compute, storage or network resources use get_compute_resources, ...\r\n\r\nTo get the location of all resources use\r\n\r\n    client.list resources\r\n\r\nAnalogue for compute, storage, network.\r\n\r\nTo get a list of all OS / resource templates use\r\n\r\n    client.get_os_templates\r\n    client.get_resource_templates\r\n\r\nTo create a new compute resource use\r\n\r\n    os = client.get_os_templates.select { |template| template.term.include? 'my_os' }\r\n    size = client.get_resource_templates.select { |template| template.term.include? 'large' }\r\n    cmpt = OCCI::Core::Resource.new compute\r\n    cmpt.mixins << os << size\r\n    cmpt.attributes.occi!.core!.title = \"My VM\"\r\n    client.create cmpt\r\n\r\n### Logging\r\n\r\nThe OCCI gem includes its own logging mechanism using a message queue. By default, no one is listening to that queue.\r\nA new OCCI Logger can be initialized by specifying the log destination (either a filename or an IO object like\r\nSTDOUT) and the log level.\r\n\r\n    OCCI::Log.new(STDOUT,OCCI::Log::INFO)\r\n\r\nYou can create multiple Loggers to receive the log output.\r\n\r\nYou can always, even if there is no logger defined, log output using the class methods of OCCI::Log e.g.\r\n\r\n    OCCI::Log.info(\"Test message\")\r\n\r\n### Registering categories in the OCCI Model\r\n\r\nBefore the parser may be used, the available categories have to be registered in the OCCI Model.\r\n\r\nFor categories already specified by the OCCI WG a method exists in the OCCI Model class to register them:\r\n\r\n    model = OCCI::Model.new\r\n    model.register_infrastructure\r\n\r\nFurther categories can either be registered from files which include OCCI collections in JSON formator or from parsed\r\n JSON objects (e.g. from the query interface of an OCCI service endpoint).\r\n\r\n### Parsing OCCI messages\r\n\r\nThe OCCI gem includes a Parser to easily parse OCCI messages. With a given media type (e.g. json,\r\nxml or plain text) the parser analyses the content of the message body and, if supplied,\r\nthe message header. As the text/plain and text/occi media type do not clearly distinguish between a message with a\r\ncategory and a message with an entity which has a kind, it has to be specified if the message contains a category (e\r\n.g. for user defined mixins)\r\n\r\nOCCI messages can be parsed to an OCCI collection for example like\r\n\r\n    media_type = text/plain\r\n    body = %Q|Category: compute; scheme=\"http://schemas.ogf.org/occi/infrastructure#\"; class=\"kind\"|\r\n    collection=OCCI::Parser.parse(media_type, body)\r\n\r\n### Parsing OVF / OVA files\r\n\r\nParsing of OVF/OVA files is partly supported and will be improved in future versions.\r\n\r\nThe example in [DMTF DSP 2021](http://www.dmtf.org/sites/default/files/standards/documents/DSP2021_1.0.0.tar) is\r\nbundled with rOCCI and can be parsed to an OCCI collection with\r\n\r\n    require 'open-uri'\r\n    ova=open 'https://raw.github.com/gwdg/rOCCI/master/spec/occi/test.ova'\r\n    collection=OCCI::Parser.ova(ova.read)\r\n\r\nCurrently only the following entries of OVF files are parsed\r\n\r\n* File in References\r\n* Disk in the DiskSection\r\n* Network in the NetworkSection\r\n* in the VirutalSystemSection:\r\n** Info\r\n** in the VirtualHardwareSection the items regarding\r\n*** Processor\r\n*** Memory\r\n*** Ethernet Adapter\r\n*** Parallel port\r\n\r\n### Using the OCCI model\r\n\r\nThe OCCI gem includes all OCCI Core classes necessary to handly arbitrary OCCI objects.\r\n\r\nChangelog\r\n---------\r\n\r\n### version 2.5\r\n\r\n* improved OCCI Client\r\n* improved documentation\r\n* several bugfixes\r\n\r\n### Version 2.4\r\n\r\n* Changed OCCI attribute properties from lowercase to first letter uppercase (e.g. type -> Type, default -> Default, ...)\r\n\r\n### Version 2.3\r\n\r\n* OCCI objects are now initialized with a list of attributes instead of a hash. Thus it is easier to check which\r\nattributes are expected by a class and helps prevent errors.\r\n* Parsing of a subset of the OVF specification is supported. Further parts of the specification will be covered in\r\nfuture versions of rOCCI.\r\n\r\n### Version 2.2\r\n\r\n* OCCI Client added. The client simplifies the execution of OCCI commands and provides shortcuts for often used steps.\r\n\r\n### Version 2.1\r\n\r\n* Several improvements to the gem structure and code documentation. First rSpec test were added. Readme has been extended to include instructions how the gem can be used.\r\n\r\n### Version 2.0\r\n\r\n* Starting with version 2.0 Florian Feldhaus and Piotr Kasprzak took over the development of the OCCI gem. The codebase was taken from the rOCCI framework and improved to be bundled as a standalone gem.\r\n\r\n### Version 1.X\r\n\r\n* Version 1.X of the OCCI gem has been developed by retr0h and served as a simple way to access the first OpenNebula OCCI implementation.\r\n\r\nDevelopment\r\n-----------\r\n\r\nCheckout latest version from GIT:\r\n\r\n    git clone git://github.com/gwdg/rOCCI.git\r\n\r\nChange to rOCCI folder\r\n\r\n    cd rOCCI\r\n\r\nInstall dependencies for deployment\r\n\r\n    bundle install --deployment\r\n\r\n### Code Documentation\r\n\r\n[Code Documentation for rOCCI by YARD](http://rubydoc.info/github/gwdg/rOCCI/)\r\n\r\n### Continuous integration\r\n\r\n[Continuous integration for rOCCI by Travis-CI](http://travis-ci.org/gwdg/rOCCI/)\r\n\r\n### Contribute\r\n\r\n1. Fork it.\r\n2. Create a branch (git checkout -b my_markup)\r\n3. Commit your changes (git commit -am \"My changes\")\r\n4. Push to the branch (git push origin my_markup)\r\n5. Create an Issue with a link to your branch"}